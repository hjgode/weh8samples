<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BT_CONNECT" xml:space="preserve">
    <value>Select Connect</value>
  </data>
  <data name="BT_SETTINGS" xml:space="preserve">
    <value>ms-settings-bluetooth</value>
  </data>
  <data name="CONNECT_STATUS" xml:space="preserve">
    <value>Connecting to printer...</value>
  </data>
  <data name="CONNECT_SUCCESS" xml:space="preserve">
    <value>Connected to printer successfully</value>
  </data>
  <data name="CONNECT_UNSUCCESS" xml:space="preserve">
    <value>Unable to connect to the printer</value>
  </data>
  <data name="DISCONNECT_STATUS" xml:space="preserve">
    <value>Disconnecting Printer</value>
  </data>
  <data name="DISCONNECT_SUCCESS" xml:space="preserve">
    <value>Disconnected printer successfully</value>
  </data>
  <data name="ERR_CONN_FAILED" xml:space="preserve">
    <value>Printer connection is broken</value>
  </data>
  <data name="ERR_INVALID_PARAM" xml:space="preserve">
    <value>Invalid parameter in printer object</value>
  </data>
  <data name="ERR_JSON_FILE" xml:space="preserve">
    <value>JSON file not found</value>
  </data>
  <data name="ERR_JSON_INVALID" xml:space="preserve">
    <value>JSON file is invalid</value>
  </data>
  <data name="ERR_LABEL_PRINT" xml:space="preserve">
    <value>Label printing not supported</value>
  </data>
  <data name="ERR_MAC_ADDRESS" xml:space="preserve">
    <value>Invalid mac address</value>
  </data>
  <data name="ERR_NO_CONN" xml:space="preserve">
    <value>Printer does not exist or is off</value>
  </data>
  <data name="ERR_PAIRING" xml:space="preserve">
    <value>Is the printer paired?</value>
  </data>
  <data name="ERR_PRINTER_ID" xml:space="preserve">
    <value>Invalid printer id</value>
  </data>
  <data name="FP" xml:space="preserve">
    <value>Fingerprint</value>
  </data>
  <data name="INVALID_ERR" xml:space="preserve">
    <value>Invalid error</value>
  </data>
  <data name="JSON_FILE" xml:space="preserve">
    <value>printer_profiles.JSON</value>
  </data>
  <data name="LBL_ERR_STATUS" xml:space="preserve">
    <value>Error printing label, check connection</value>
  </data>
  <data name="LBL_PRINT_STATUS" xml:space="preserve">
    <value>Printing label...</value>
  </data>
  <data name="LBL_PRINT_SUCCESS" xml:space="preserve">
    <value>Printed label successfully</value>
  </data>
  <data name="LBL_TITLE" xml:space="preserve">
    <value>PrintLabel</value>
  </data>
  <data name="PTR_NOT_PAIRED" xml:space="preserve">
    <value>Pair selected printer using the wizard</value>
  </data>
  <data name="RECPT_ERROR_STATUS" xml:space="preserve">
    <value>Error in printing receipt, check connection</value>
  </data>
  <data name="RECPT_PRINT_STATUS" xml:space="preserve">
    <value>Printing reseipt...</value>
  </data>
  <data name="RECPT_PRINT_SUCCESS" xml:space="preserve">
    <value>Printed receipt successfully</value>
  </data>
  <data name="RECPT_TITLE" xml:space="preserve">
    <value>PrintReceipt</value>
  </data>
</root>